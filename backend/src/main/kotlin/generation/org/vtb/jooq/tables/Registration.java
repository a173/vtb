/*
 * This file is generated by jOOQ.
 */
package org.vtb.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vtb.jooq.Keys;
import org.vtb.jooq.Public;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Registration extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.registration</code>
     */
    public static final Registration REGISTRATION = new Registration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.registration.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.registration.office_id</code>.
     */
    public final TableField<Record, Long> OFFICE_ID = createField(DSL.name("office_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.registration.client_id</code>.
     */
    public final TableField<Record, Long> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.registration.date_time</code>.
     */
    public final TableField<Record, OffsetDateTime> DATE_TIME = createField(DSL.name("date_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.registration.identifier</code>.
     */
    public final TableField<Record, Integer> IDENTIFIER = createField(DSL.name("identifier"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.registration.service</code>.
     */
    public final TableField<Record, String> SERVICE = createField(DSL.name("service"), SQLDataType.VARCHAR(150).nullable(false), this, "");

    private Registration(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Registration(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.registration</code> table reference
     */
    public Registration(String alias) {
        this(DSL.name(alias), REGISTRATION);
    }

    /**
     * Create an aliased <code>public.registration</code> table reference
     */
    public Registration(Name alias) {
        this(alias, REGISTRATION);
    }

    /**
     * Create a <code>public.registration</code> table reference
     */
    public Registration() {
        this(DSL.name("registration"), null);
    }

    public <O extends Record> Registration(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, REGISTRATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<Record, Long> getIdentity() {
        return (Identity<Record, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.REGISTRATION_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.REGISTRATION__REGISTRATION_OFFICE_ID_FKEY);
    }

    private transient Office _office;

    /**
     * Get the implicit join path to the <code>public.office</code> table.
     */
    public Office office() {
        if (_office == null)
            _office = new Office(this, Keys.REGISTRATION__REGISTRATION_OFFICE_ID_FKEY);

        return _office;
    }

    @Override
    public Registration as(String alias) {
        return new Registration(DSL.name(alias), this);
    }

    @Override
    public Registration as(Name alias) {
        return new Registration(alias, this);
    }

    @Override
    public Registration as(Table<?> alias) {
        return new Registration(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Registration rename(String name) {
        return new Registration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Registration rename(Name name) {
        return new Registration(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Registration rename(Table<?> name) {
        return new Registration(name.getQualifiedName(), null);
    }
}
